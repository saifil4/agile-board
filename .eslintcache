[{"D:\\task-priority\\src\\index.js":"1","D:\\task-priority\\src\\App.js":"2","D:\\task-priority\\src\\reportWebVitals.js":"3","D:\\task-priority\\src\\components\\sidenav.js":"4","D:\\task-priority\\src\\components\\main.js":"5","D:\\task-priority\\src\\components\\taskform.js":"6","D:\\task-priority\\src\\components\\task.js":"7","D:\\task-priority\\src\\components\\tasklist.js":"8","D:\\task-priority\\src\\components\\lane.js":"9","D:\\task-priority\\src\\components\\lanelist.js":"10","D:\\task-priority\\src\\components\\labelform.js":"11","D:\\agile-board\\src\\index.js":"12","D:\\agile-board\\src\\reportWebVitals.js":"13","D:\\agile-board\\src\\App.js":"14","D:\\agile-board\\src\\components\\sidenav.js":"15","D:\\agile-board\\src\\components\\labelform.js":"16","D:\\agile-board\\src\\components\\main.js":"17","D:\\agile-board\\src\\components\\lanelist.js":"18","D:\\agile-board\\src\\components\\taskform.js":"19","D:\\agile-board\\src\\components\\lane.js":"20","D:\\agile-board\\src\\components\\tasklist.js":"21","D:\\agile-board\\src\\components\\task.js":"22"},{"size":584,"mtime":1611357483516,"results":"23","hashOfConfig":"24"},{"size":1822,"mtime":1611615879343,"results":"25","hashOfConfig":"24"},{"size":362,"mtime":499162500000,"results":"26","hashOfConfig":"24"},{"size":1783,"mtime":1611615870290,"results":"27","hashOfConfig":"24"},{"size":3963,"mtime":1611615567011,"results":"28","hashOfConfig":"24"},{"size":4277,"mtime":1611559616001,"results":"29","hashOfConfig":"24"},{"size":1055,"mtime":1611559654584,"results":"30","hashOfConfig":"24"},{"size":486,"mtime":1611615292645,"results":"31","hashOfConfig":"24"},{"size":1043,"mtime":1611615267830,"results":"32","hashOfConfig":"24"},{"size":1100,"mtime":1611615240362,"results":"33","hashOfConfig":"24"},{"size":1819,"mtime":1611531254719,"results":"34","hashOfConfig":"24"},{"size":584,"mtime":1611357483516,"results":"35","hashOfConfig":"36"},{"size":362,"mtime":499162500000,"results":"37","hashOfConfig":"36"},{"size":1822,"mtime":1611615879343,"results":"38","hashOfConfig":"36"},{"size":1783,"mtime":1611615870290,"results":"39","hashOfConfig":"36"},{"size":1819,"mtime":1611531254719,"results":"40","hashOfConfig":"36"},{"size":3963,"mtime":1611615567011,"results":"41","hashOfConfig":"36"},{"size":1100,"mtime":1611615240362,"results":"42","hashOfConfig":"36"},{"size":4277,"mtime":1611559616001,"results":"43","hashOfConfig":"36"},{"size":1043,"mtime":1611615267830,"results":"44","hashOfConfig":"36"},{"size":486,"mtime":1611615292645,"results":"45","hashOfConfig":"36"},{"size":1055,"mtime":1611559654584,"results":"46","hashOfConfig":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},"gfm0xq",{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"49"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"49"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"49"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1xvjlim",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\task-priority\\src\\index.js",[],["95","96"],"D:\\task-priority\\src\\App.js",[],"D:\\task-priority\\src\\reportWebVitals.js",[],"D:\\task-priority\\src\\components\\sidenav.js",[],"D:\\task-priority\\src\\components\\main.js",["97"],"import React, { useState, useEffect } from 'react';\r\nimport { Dropdown, Button } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../App.css';\r\n\r\n//importing components\r\nimport LaneList from './lanelist';\r\nimport TaskForm from './taskform';\r\n\r\n\r\nconst Main = ({ setNavOpenStatus, navOpenStatus, labelList, selectedLabel }) => {\r\n    const [taskFormShow, setTaskFormShow] = useState(false);\r\n    const [SortValue, setSortValue] = useState('Due Date');\r\n\r\n    const [tasks, setTasks] = useState([\r\n        {\r\n            id: Math.random() * 1000,\r\n            label: 'Bug',\r\n            labelid: 1,\r\n            taskname: 'Demo task',\r\n            description: 'this is a demo description',\r\n            duedate: '12th Feb 2021',\r\n            priority: 'High',\r\n            laneid: 1\r\n        },\r\n        {\r\n            id: Math.random() * 1000,\r\n            label: 'Story',\r\n            labelid: 2,\r\n            taskname: 'In progress task',\r\n            description: 'this is a demo description',\r\n            duedate: '12th Feb 2021',\r\n            priority: 'Medium',\r\n            laneid: 2\r\n        }\r\n    ]);\r\n    const [filteredTasks, setFilteredTasks] = useState([]);\r\n\r\n\r\n    const [lanes, setLanes] = useState([\r\n        {\r\n            id: 1,\r\n            lanename: 'Backlog'\r\n        },\r\n        {\r\n            id: 2,\r\n            lanename: 'Open'\r\n        },\r\n        {\r\n            id: 3,\r\n            lanename: 'In Progress'\r\n        },\r\n        {\r\n            id: 4,\r\n            lanename: 'Done'\r\n        }\r\n    ]);\r\n\r\n    const navStatusHandler = () => {\r\n        setNavOpenStatus(!navOpenStatus);\r\n    }\r\n\r\n    const SortValueHandler = (k) => {\r\n        console.log(k);\r\n        setSortValue(k);\r\n    }\r\n    const filterHandler = () => {\r\n        if (selectedLabel === 0) {\r\n            setFilteredTasks(tasks);\r\n        } else {\r\n            console.log(tasks.filter(t => t.labelid === selectedLabel));\r\n            console.log(tasks);\r\n\r\n            setFilteredTasks(tasks.filter(t => t.labelid === selectedLabel));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        filterHandler();\r\n    }, [selectedLabel, tasks]);\r\n\r\n    return (\r\n        <>\r\n            <div className=\"filtercontainer\">\r\n                <i className={`fas fa-bars menu-icon mr-3 + ${navOpenStatus ? \"display-none\" : \"\"}`} onClick={navStatusHandler}></i>\r\n                <Dropdown style={{ display: 'inline-block' }}>\r\n                    <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n                        <i className=\"fas fa-sort mr-2\"></i>\r\n                        Sort by: {SortValue}\r\n                    </Dropdown.Toggle>\r\n\r\n                    <Dropdown.Menu>\r\n                        <Dropdown.Item eventKey=\"Due Date\" onSelect={(k) => SortValueHandler(k)} >Due Date</Dropdown.Item>\r\n                        <Dropdown.Item eventKey=\"Priority\" onSelect={(k) => SortValueHandler(k)}>Priority</Dropdown.Item>\r\n                    </Dropdown.Menu>\r\n                </Dropdown>\r\n\r\n                <Button\r\n                    className=\"btn btn-primary\"\r\n                    style={{ display: 'inline-block', float: 'right' }}\r\n                    onClick={() => setTaskFormShow(true)}>\r\n                    Add Task\r\n                        <i className=\"fas fa-plus ml-2\"></i>\r\n                </Button>\r\n            </div>\r\n            <div className=\"taskscontainer\">\r\n                <LaneList\r\n                    lanes={lanes}\r\n                    setLanes={setLanes}\r\n                    tasks={tasks}\r\n                    setTasks={setTasks}\r\n                    filteredTasks={filteredTasks} />\r\n            </div>\r\n            <TaskForm\r\n                taskFormShow={taskFormShow}\r\n                setTaskFormShowToClose={() => setTaskFormShow(false)}\r\n                tasks={tasks}\r\n                setTasks={setTasks}\r\n                labelList={labelList} />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Main;","D:\\task-priority\\src\\components\\taskform.js",["98"],"import React, { useState, useEffect } from 'react';\r\nimport { Modal, Button, Form } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst TaskForm = ({ taskFormShow, setTaskFormShowToClose, tasks, setTasks, labelList }) => {\r\n\r\n    const [taskname, setTaskName] = useState('');\r\n    const [duedate, setDuedate] = useState('');\r\n    const [priority, setPriority] = useState('High');\r\n    const [description, setDescription] = useState('');\r\n    const [label, setLabel] = useState('');\r\n\r\n    const CreateTask = (e) => {\r\n        e.preventDefault();\r\n        setTasks([...tasks, newtask()]);\r\n        setTaskFormShowToClose();\r\n    }\r\n\r\n    function newtask() {\r\n        return {\r\n            'id': Math.random() * 1000,\r\n            'taskname': taskname,\r\n            'description': description,\r\n            'duedate': duedate,\r\n            'priority': priority,\r\n            'label': label,\r\n            'laneid': 1\r\n        }\r\n    }\r\n\r\n    // functon CheckFormValidity(){\r\n    //     if()\r\n    // }\r\n\r\n\r\n    return (\r\n        <Modal\r\n            show={taskFormShow}\r\n            onHide={setTaskFormShowToClose}\r\n            size=\"md\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered>\r\n\r\n            <Modal.Header closeButton>\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                    New Task\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form>\r\n                    <Form.Group>\r\n                        <Form.Label>Type</Form.Label>\r\n                        <Form.Control onChange={e => setLabel(e.target.value)} as=\"select\">\r\n                            <option value=''>\r\n                               Select\r\n                            </option>\r\n                            {\r\n                                labelList.map(label => (\r\n                                    <option value={label.name}>\r\n                                        {label.name}\r\n                                    </option>\r\n                                ))\r\n                            }\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"formBasicEmail\">\r\n                        <Form.Label>Name</Form.Label>\r\n                        <Form.Control onChange={e => setTaskName(e.target.value)} type=\"text\" placeholder=\"Task Name\" />\r\n                        {/* <Form.Text className=\"text-muted\">\r\n                            We'll never share your email with anyone else.\r\n                        </Form.Text> */}\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"formBasicEmail\">\r\n                        <Form.Label>Due date</Form.Label>\r\n                        <Form.Control onChange={e => setDuedate(e.target.value)} type=\"date\" placeholder=\"Enter due date\" />\r\n                        {/* <Form.Text className=\"text-muted\">\r\n                            We'll never share your email with anyone else.\r\n                        </Form.Text> */}\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"exampleForm.ControlSelect2\">\r\n                        <Form.Label>Priority</Form.Label>\r\n                        <Form.Control onChange={e => setPriority(e.target.value)} as=\"select\">\r\n                            <option value=\"high\">High</option>\r\n                            <option value=\"medium\">Medium</option>\r\n                            <option value=\"low\">Low</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"exampleForm.ControlTextarea1\">\r\n                        <Form.Label>Description</Form.Label>\r\n                        <Form.Control onChange={e => setDescription(e.target.value)} as=\"textarea\" rows={2} />\r\n                    </Form.Group>\r\n                </Form>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={setTaskFormShowToClose}>Cancel</Button>\r\n                <Button variant=\"primary\" onClick={(e) => CreateTask(e)} type=\"submit\">Create Task</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default TaskForm;","D:\\task-priority\\src\\components\\task.js",[],"D:\\task-priority\\src\\components\\tasklist.js",[],"D:\\task-priority\\src\\components\\lane.js",[],"D:\\task-priority\\src\\components\\lanelist.js",[],"D:\\task-priority\\src\\components\\labelform.js",["99"],"import React, { useState, useEffect } from 'react';\r\nimport { Modal, Button, Form } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst LabelForm = ({ labelFormShow, setLabelFormShowToClose, labelList, setLabelList }) => {\r\n\r\n    const [labelname, setLabelName] = useState('');\r\n\r\n    const CreateLabel = (e) => {\r\n        e.preventDefault();\r\n        setLabelList([...labelList, newLabel()]);\r\n        setLabelFormShowToClose();\r\n    }\r\n\r\n    function newLabel() {\r\n        return {\r\n            'id': Math.random() * 1000,\r\n            'name': labelname,\r\n            'iconclass': 'fas fa-tag'\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            show={labelFormShow}\r\n            onHide={setLabelFormShowToClose}\r\n            size=\"md\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered>\r\n\r\n            <Modal.Header closeButton>\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                    New Label\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form>\r\n                    <Form.Group>\r\n                        <Form.Label>Name</Form.Label>\r\n                        <Form.Control\r\n                            onChange={e => setLabelName(e.target.value)}\r\n                            type=\"text\"\r\n                            placeholder=\"Label Name\" />\r\n                    </Form.Group>\r\n                </Form>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={setLabelFormShowToClose}>Cancel</Button>\r\n                <Button variant=\"primary\" onClick={(e) => CreateLabel(e)} type=\"submit\">Create Label</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default LabelForm;","D:\\agile-board\\src\\index.js",[],"D:\\agile-board\\src\\reportWebVitals.js",[],"D:\\agile-board\\src\\App.js",[],"D:\\agile-board\\src\\components\\sidenav.js",[],"D:\\agile-board\\src\\components\\labelform.js",["100"],"D:\\agile-board\\src\\components\\main.js",["101"],"D:\\agile-board\\src\\components\\lanelist.js",[],"D:\\agile-board\\src\\components\\taskform.js",["102"],"D:\\agile-board\\src\\components\\lane.js",[],"D:\\agile-board\\src\\components\\tasklist.js",[],"D:\\agile-board\\src\\components\\task.js",[],{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","severity":1,"message":"108","line":80,"column":8,"nodeType":"109","endLine":80,"endColumn":30,"suggestions":"110"},{"ruleId":"111","severity":1,"message":"112","line":1,"column":27,"nodeType":"113","messageId":"114","endLine":1,"endColumn":36},{"ruleId":"111","severity":1,"message":"112","line":1,"column":27,"nodeType":"113","messageId":"114","endLine":1,"endColumn":36},{"ruleId":"111","severity":1,"message":"112","line":1,"column":27,"nodeType":"113","messageId":"114","endLine":1,"endColumn":36},{"ruleId":"107","severity":1,"message":"108","line":80,"column":8,"nodeType":"109","endLine":80,"endColumn":30,"suggestions":"115"},{"ruleId":"111","severity":1,"message":"112","line":1,"column":27,"nodeType":"113","messageId":"114","endLine":1,"endColumn":36},"no-native-reassign",["116"],"no-negated-in-lhs",["117"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'filterHandler'. Either include it or remove the dependency array.","ArrayExpression",["118"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar",["119"],"no-global-assign","no-unsafe-negation",{"desc":"120","fix":"121"},{"desc":"120","fix":"122"},"Update the dependencies array to be: [filterHandler, selectedLabel, tasks]",{"range":"123","text":"124"},{"range":"125","text":"124"},[2142,2164],"[filterHandler, selectedLabel, tasks]",[2142,2164]]