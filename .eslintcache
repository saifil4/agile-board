[{"D:\\Other projects\\agile-board\\src\\index.js":"1","D:\\Other projects\\agile-board\\src\\reportWebVitals.js":"2","D:\\Other projects\\agile-board\\src\\App.js":"3","D:\\Other projects\\agile-board\\src\\components\\Main.js":"4","D:\\Other projects\\agile-board\\src\\components\\header\\Header.js":"5","D:\\Other projects\\agile-board\\src\\components\\task-lane\\LaneList.js":"6","D:\\Other projects\\agile-board\\src\\components\\header\\LabelDropdown.js":"7","D:\\Other projects\\agile-board\\src\\components\\header\\Search.js":"8","D:\\Other projects\\agile-board\\src\\components\\task-lane\\Lane.js":"9","D:\\Other projects\\agile-board\\src\\components\\ModalLoader.js":"10","D:\\Other projects\\agile-board\\src\\components\\task-lane\\LaneTitle.js":"11","D:\\Other projects\\agile-board\\src\\components\\label-form\\LabelForm.js":"12","D:\\Other projects\\agile-board\\src\\components\\task-form\\TaskForm.js":"13","D:\\Other projects\\agile-board\\src\\components\\task-lane\\Task.js":"14","D:\\Other projects\\agile-board\\src\\components\\task-form\\NameInput.js":"15","D:\\Other projects\\agile-board\\src\\components\\task-form\\DueDateInput.js":"16","D:\\Other projects\\agile-board\\src\\components\\task-form\\DescriptionInput.js":"17","D:\\Other projects\\agile-board\\src\\components\\task-form\\PriorityInput.js":"18","D:\\Other projects\\agile-board\\src\\components\\task-form\\TaskTypeInput.js":"19","D:\\Other projects\\agile-board\\src\\components\\TaskModal.js":"20","D:\\Other projects\\agile-board\\src\\DataContext.js":"21","D:\\Other projects\\agile-board\\src\\data\\index.js":"22"},{"size":588,"mtime":1655433816911,"results":"23","hashOfConfig":"24"},{"size":362,"mtime":499162500000,"results":"25","hashOfConfig":"24"},{"size":316,"mtime":1655421139409,"results":"26","hashOfConfig":"24"},{"size":1421,"mtime":1658880805582,"results":"27","hashOfConfig":"24"},{"size":926,"mtime":1653189149117,"results":"28","hashOfConfig":"24"},{"size":2483,"mtime":1654567971491,"results":"29","hashOfConfig":"24"},{"size":1933,"mtime":1655438573251,"results":"30","hashOfConfig":"24"},{"size":279,"mtime":1655438552107,"results":"31","hashOfConfig":"24"},{"size":2515,"mtime":1655419618374,"results":"32","hashOfConfig":"24"},{"size":715,"mtime":1653199584266,"results":"33","hashOfConfig":"24"},{"size":1723,"mtime":1655434471716,"results":"34","hashOfConfig":"24"},{"size":3484,"mtime":1655434525325,"results":"35","hashOfConfig":"24"},{"size":3721,"mtime":1655434565444,"results":"36","hashOfConfig":"24"},{"size":2498,"mtime":1658879409380,"results":"37","hashOfConfig":"24"},{"size":406,"mtime":1655418913018,"results":"38","hashOfConfig":"24"},{"size":398,"mtime":1655419783291,"results":"39","hashOfConfig":"24"},{"size":399,"mtime":1655419719798,"results":"40","hashOfConfig":"24"},{"size":575,"mtime":1658879369514,"results":"41","hashOfConfig":"24"},{"size":1139,"mtime":1655420374141,"results":"42","hashOfConfig":"24"},{"size":3482,"mtime":1655419969217,"results":"43","hashOfConfig":"24"},{"size":1014,"mtime":1655421242123,"results":"44","hashOfConfig":"24"},{"size":2615,"mtime":1658879355847,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"1x7e9xi",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"48"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"48"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"48"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"48"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Other projects\\agile-board\\src\\index.js",[],["95","96"],"D:\\Other projects\\agile-board\\src\\reportWebVitals.js",[],"D:\\Other projects\\agile-board\\src\\App.js",[],"D:\\Other projects\\agile-board\\src\\components\\Main.js",["97"],"D:\\Other projects\\agile-board\\src\\components\\header\\Header.js",[],"D:\\Other projects\\agile-board\\src\\components\\task-lane\\LaneList.js",[],"D:\\Other projects\\agile-board\\src\\components\\header\\LabelDropdown.js",[],"D:\\Other projects\\agile-board\\src\\components\\header\\Search.js",[],"D:\\Other projects\\agile-board\\src\\components\\task-lane\\Lane.js",["98","99"],"import React, { useState } from 'react';\r\nimport { Droppable } from 'react-beautiful-dnd';\r\nimport LaneTitle from './LaneTitle';\r\nimport ModalLoader from '../ModalLoader';\r\nimport TaskForm from '../task-form/TaskForm';\r\nimport Task from './Task';\r\nimport TaskModal from '../TaskModal';\r\n\r\n\r\nconst Lane = ({ lane, setLanes }) => {\r\n    const [showModal, setShowModal] = useState(false);\r\n\r\n    const openModal = (e) => {\r\n        e.preventDefault();\r\n        setShowModal(true);\r\n    }\r\n\r\n    const closeModal = () => {\r\n        setShowModal(false);\r\n    }\r\n\r\n\r\n    const addTask = (newTask) => {\r\n        setLanes((prev) => {\r\n            return prev.map(ln => {\r\n                if (ln.id === lane.id) {\r\n                    return { ...ln, tasks: [...ln.tasks, newTask] }\r\n                }\r\n                return ln\r\n            })\r\n        })\r\n    }\r\n\r\n    const updateTask = (updatedTask) => {\r\n        setLanes((prev) => {\r\n            return prev.map(ln => {\r\n                if (ln.id === lane.id) {\r\n                    return { ...ln, tasks: ln.tasks.map(task => task.id === updatedTask.id ? updatedTask : task) }\r\n                }\r\n                return ln\r\n            })\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"lane\">\r\n                <LaneTitle lane={lane} />\r\n                <div onClick={(e) => openModal(e)} className=\"add-button\"><i className=\"fas fa-plus\"></i></div>\r\n                <Droppable droppableId={lane.id.toString()} key={lane.id}>\r\n                    {(provided) => (\r\n                        <div\r\n                            {...provided.droppableProps}\r\n                            ref={provided.innerRef}\r\n                            className=\"lane-body\">\r\n                            {\r\n                                lane.tasks.map((task, index) => (\r\n                                    <Task\r\n                                        index={index}\r\n                                        updateTask={updateTask}\r\n                                        key={task.id}\r\n                                        task={task} />\r\n                                ))\r\n                            }\r\n                            {provided.placeholder}\r\n                        </div>\r\n                    )}\r\n                </Droppable>\r\n            </div>\r\n            <TaskModal\r\n                save={addTask}\r\n                showModal={showModal}\r\n                closeModal={closeModal} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Lane;","D:\\Other projects\\agile-board\\src\\components\\ModalLoader.js",[],"D:\\Other projects\\agile-board\\src\\components\\task-lane\\LaneTitle.js",["100"],"import React, { useState } from 'react';\r\n\r\nconst LaneTitle = ({ lane }) => {\r\n    const [showTextField, setShowTextField] = useState(false);\r\n    const [laneName, setLaneName] = useState(lane.lanename);\r\n\r\n    const updateLaneAndClose = () => {\r\n        if (laneName) {\r\n            // Dispatch(updateLaneName(getUpdatedLane()));\r\n            setShowTextField(false);\r\n        }\r\n    }\r\n\r\n    const handleBlur = () => {\r\n        updateLaneAndClose();\r\n    }\r\n\r\n    const handleInputClick = (e) => {\r\n        if (e.charCode === 13) {\r\n            updateLaneAndClose();\r\n        }\r\n    }\r\n\r\n    const handleTextClick = () => {\r\n        setShowTextField(true);\r\n    }\r\n\r\n    const getUpdatedLane = () => {\r\n        return {\r\n            id: lane.id,\r\n            lanename: laneName\r\n        }\r\n    }\r\n\r\n    const laneTitleInputClass = () => {\r\n        return 'lane-title-input' + (laneName ? '' : ' error')\r\n    }\r\n    return (\r\n        <>\r\n            {\r\n                showTextField\r\n                    ?\r\n                    <input\r\n                        value={laneName}\r\n                        autoFocus\r\n                        onChange={e => setLaneName(e.target.value)}\r\n                        onKeyPress={handleInputClick}\r\n                        onBlur={handleBlur}\r\n                        className={laneTitleInputClass()}\r\n                        type=\"text\" />\r\n                    :\r\n                    <h6\r\n                        onClick={handleTextClick}\r\n                        className=\"lane-title\">\r\n                        {lane.lanename}\r\n                        <i className=\"fas fa-pencil-alt\"></i>\r\n                    </h6>\r\n            }\r\n        </>\r\n    )\r\n}\r\nexport default LaneTitle;","D:\\Other projects\\agile-board\\src\\components\\label-form\\LabelForm.js",["101"],"import React, { useState } from 'react';\r\nimport { Modal, Button, Form } from 'react-bootstrap';\r\n\r\nconst LabelForm = ({ closeForm }) => {\r\n\r\n    const [labelname, setLabelName] = useState('');\r\n    const [key, setKey] = useState('');\r\n    const [background, setBackground] = useState('#000000');\r\n    const [color, setColor] = useState('#ffffff');\r\n\r\n    const CreateLabel = (e) => {\r\n        e.preventDefault();\r\n        // Dispatch(addLabel(newLabel()))\r\n        closeForm();\r\n    }\r\n\r\n    function newLabel() {\r\n        return {\r\n            'id': Math.random() * 1000,\r\n            'key': key,\r\n            'name': labelname,\r\n            'bgcolor': background,\r\n            'color': color,\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title as=\"h6\" id=\"contained-modal-title-vcenter\">\r\n                    New Label\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form>\r\n                    <Form.Group>\r\n                        <Form.Label>Id</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            onChange={e => setKey(e.target.value)}\r\n                            maxlength=\"2\"\r\n                            style={{ width: '70px', textTransform: 'uppercase' }}\r\n                            placeholder=\"Id\" />\r\n                        <Form.Text className=\"text-muted\">\r\n                            Id should be two letters long </Form.Text>\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                        <Form.Label>Name</Form.Label>\r\n                        <Form.Control\r\n                            onChange={e => setLabelName(e.target.value)}\r\n                            type=\"text\"\r\n                            placeholder=\"Label Name\" />\r\n                    </Form.Group>\r\n                    <div>\r\n                        <Form.Group style={{ width: '50%', display: 'inline-block' }}>\r\n                            <Form.Label>Font Color</Form.Label>\r\n                            <Form.Control\r\n                                style={{ width: 'calc(100% - 5px)' }}\r\n                                type=\"color\"\r\n                                onChange={e => setColor(e.target.value)}\r\n                                value={color}\r\n                                maxlength=\"2\"\r\n                                placeholder=\"Id\" />\r\n                        </Form.Group>\r\n                        <Form.Group style={{ width: '50%', display: 'inline-block' }}>\r\n                            <Form.Label>Background</Form.Label>\r\n                            <Form.Control\r\n                                style={{ width: 'calc(100% - 5px)' }}\r\n                                type=\"color\"\r\n                                onChange={e => setBackground(e.target.value)}\r\n                                value={background}\r\n                                maxlength=\"2\"\r\n                                placeholder=\"Id\" />\r\n                        </Form.Group>\r\n                    </div>\r\n\r\n                </Form>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={() => closeForm()}>Cancel</Button>\r\n                <Button variant=\"primary\" onClick={(e) => CreateLabel(e)} type=\"submit\">Create Label</Button>\r\n            </Modal.Footer>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default LabelForm;","D:\\Other projects\\agile-board\\src\\components\\task-form\\TaskForm.js",["102","103","104","105"],"import React, { useState } from 'react';\r\nimport { Modal, Form, Container, Row, Col } from 'react-bootstrap';\r\nimport NameInput from './NameInput';\r\nimport TaskTypeInput from './TaskTypeInput';\r\nimport DescriptionInput from './DescriptionInput';\r\nimport DueDateInput from './DueDateInput';\r\nimport PriorityInput from './PriorityInput';\r\n\r\nconst TaskForm = ({ closeForm, entity, entityType }) => {\r\n\r\n    const [taskname, setTaskName] = useState(entity.taskname);\r\n    const [duedate, setDuedate] = useState(entity.duedate);\r\n    const [priority, setPriority] = useState(entityType === 'task' ? entity.priority : 3);\r\n    const [description, setDescription] = useState(entity.description);\r\n    const [labelId, setLabelId] = useState(entity.labelid);\r\n\r\n    const [task, setTask] = useState(\r\n        {\r\n            id: Math.random() * 1000,\r\n            labelid: 1,\r\n            taskname: 'Misspelling on Navbar',\r\n            description: 'this is a demo description',\r\n            duedate: '2021-02-12',\r\n            priority: 3,\r\n            laneid: 1\r\n        }\r\n    )\r\n\r\n\r\n    const CreateTask = (e) => {\r\n        e.preventDefault();\r\n        // Dispatch(addTask(newtask()));\r\n        closeForm();\r\n    }\r\n\r\n    const UpdateTask1 = (e) => {\r\n        e.preventDefault();\r\n        // Dispatch(updateTask(updatedtask()));\r\n        closeForm();\r\n    }\r\n\r\n\r\n    function newtask() {\r\n        return {\r\n            'id': Math.random() * 1000,\r\n            'taskname': taskname,\r\n            'description': description,\r\n            'duedate': duedate,\r\n            'priority': priority,\r\n            'labelid': labelId,\r\n            'laneid': entity.id\r\n        }\r\n    }\r\n\r\n    function updatedtask() {\r\n        var task = {\r\n            'id': entity.id,\r\n            'taskname': taskname,\r\n            'description': description,\r\n            'duedate': duedate,\r\n            'priority': priority,\r\n            'labelid': labelId,\r\n            'laneid': entity.laneid\r\n        }\r\n        return task;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title as=\"h6\" id=\"contained-modal-title-vcenter\">\r\n                    New Task\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form>\r\n                    <Container>\r\n                        <Row>\r\n                            <Col md=\"8\">\r\n                                <TaskTypeInput labelId={labelId} setLabelId={setLabelId} />\r\n                                <NameInput taskname={taskname} setTaskName={setTaskName} />\r\n                                <DescriptionInput description={description} setDescription={setDescription} />\r\n                            </Col>\r\n                            <Col md=\"4\">\r\n                                <DueDateInput duedate={duedate} setDuedate={setDuedate} />\r\n                                <PriorityInput priority={priority} setPriority={setPriority} />\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </Form>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                {\r\n                    entityType === \"task\"\r\n                        ?\r\n                        <button className=\"main-btn yellow\" onClick={(e) => UpdateTask1(e)} type=\"submit\">Update Task</button>\r\n                        :\r\n                        <button className=\"main-btn yellow\" onClick={(e) => CreateTask(e)} type=\"submit\">Create Task</button>\r\n                }\r\n                <button className=\"main-btn grey\" variant=\"secondary\" onClick={closeForm}>Cancel</button>\r\n            </Modal.Footer>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default TaskForm;","D:\\Other projects\\agile-board\\src\\components\\task-lane\\Task.js",[],"D:\\Other projects\\agile-board\\src\\components\\task-form\\NameInput.js",[],"D:\\Other projects\\agile-board\\src\\components\\task-form\\DueDateInput.js",[],"D:\\Other projects\\agile-board\\src\\components\\task-form\\DescriptionInput.js",[],"D:\\Other projects\\agile-board\\src\\components\\task-form\\PriorityInput.js",[],"D:\\Other projects\\agile-board\\src\\components\\task-form\\TaskTypeInput.js",[],"D:\\Other projects\\agile-board\\src\\components\\TaskModal.js",[],"D:\\Other projects\\agile-board\\src\\DataContext.js",[],"D:\\Other projects\\agile-board\\src\\data\\index.js",[],{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","severity":1,"message":"111","line":36,"column":8,"nodeType":"112","endLine":36,"endColumn":43,"suggestions":"113"},{"ruleId":"114","severity":1,"message":"115","line":4,"column":8,"nodeType":"116","messageId":"117","endLine":4,"endColumn":19},{"ruleId":"114","severity":1,"message":"118","line":5,"column":8,"nodeType":"116","messageId":"117","endLine":5,"endColumn":16},{"ruleId":"114","severity":1,"message":"119","line":28,"column":11,"nodeType":"116","messageId":"117","endLine":28,"endColumn":25},{"ruleId":"114","severity":1,"message":"120","line":17,"column":14,"nodeType":"116","messageId":"117","endLine":17,"endColumn":22},{"ruleId":"114","severity":1,"message":"121","line":17,"column":12,"nodeType":"116","messageId":"117","endLine":17,"endColumn":16},{"ruleId":"114","severity":1,"message":"122","line":17,"column":18,"nodeType":"116","messageId":"117","endLine":17,"endColumn":25},{"ruleId":"114","severity":1,"message":"123","line":43,"column":14,"nodeType":"116","messageId":"117","endLine":43,"endColumn":21},{"ruleId":"114","severity":1,"message":"124","line":55,"column":14,"nodeType":"116","messageId":"117","endLine":55,"endColumn":25},"no-native-reassign",["125"],"no-negated-in-lhs",["126"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'filterHandler'. Either include it or remove the dependency array.","ArrayExpression",["127"],"no-unused-vars","'ModalLoader' is defined but never used.","Identifier","unusedVar","'TaskForm' is defined but never used.","'getUpdatedLane' is assigned a value but never used.","'newLabel' is defined but never used.","'task' is assigned a value but never used.","'setTask' is assigned a value but never used.","'newtask' is defined but never used.","'updatedtask' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"128","fix":"129"},"Update the dependencies array to be: [selectedLabel, lanes, searchValue, filterHandler]",{"range":"130","text":"131"},[1104,1139],"[selectedLabel, lanes, searchValue, filterHandler]"]