[{"D:\\agile-board\\src\\index.js":"1","D:\\agile-board\\src\\reportWebVitals.js":"2","D:\\agile-board\\src\\App.js":"3","D:\\agile-board\\src\\components\\labelform.js":"4","D:\\agile-board\\src\\reducers\\rootReducer.js":"5","D:\\agile-board\\src\\actions\\actions.js":"6","D:\\agile-board\\src\\reducers\\selectedlabel.reducer.js":"7","D:\\agile-board\\src\\components\\taskviewloader.js":"8","D:\\agile-board\\src\\components\\LabelForm.js":"9","D:\\agile-board\\src\\components\\task-lane\\LaneList.js":"10","D:\\agile-board\\src\\components\\task-lane\\Lane.js":"11","D:\\agile-board\\src\\components\\task-lane\\TaskList.js":"12","D:\\agile-board\\src\\components\\task-lane\\Task.js":"13","D:\\agile-board\\src\\components\\task-lane\\LaneTitle.js":"14","D:\\agile-board\\src\\reducers\\Search.reducer.js":"15","D:\\agile-board\\src\\components\\task-form\\NameInput.js":"16","D:\\agile-board\\src\\components\\task-form\\TaskTypeInput.js":"17","D:\\agile-board\\src\\components\\task-form\\DescriptionInput.js":"18","D:\\agile-board\\src\\components\\task-form\\LaneInput.js":"19","D:\\agile-board\\src\\components\\task-form\\TaskForm.js":"20","D:\\agile-board\\src\\components\\header\\Header.js":"21","D:\\agile-board\\src\\components\\header\\LabelDropdown.js":"22","D:\\agile-board\\src\\components\\task-form\\DueDateInput.js":"23","D:\\agile-board\\src\\components\\task-form\\PriorityInput.js":"24","D:\\agile-board\\src\\reducers\\LabelReducer.js":"25","D:\\agile-board\\src\\reducers\\LanesReducer.js":"26","D:\\agile-board\\src\\components\\ModalLoader.js":"27","D:\\agile-board\\src\\reducers\\FilteredLanesReducer.js":"28"},{"size":802,"mtime":1612924457896,"results":"29","hashOfConfig":"30"},{"size":362,"mtime":499162500000,"results":"31","hashOfConfig":"30"},{"size":440,"mtime":1615589576830,"results":"32","hashOfConfig":"30"},{"size":3965,"mtime":1614471349273,"results":"33","hashOfConfig":"30"},{"size":540,"mtime":1615589714672,"results":"34","hashOfConfig":"30"},{"size":1100,"mtime":1615589870883,"results":"35","hashOfConfig":"30"},{"size":248,"mtime":1613169629391,"results":"36","hashOfConfig":"30"},{"size":1367,"mtime":1615590008924,"results":"37","hashOfConfig":"30"},{"size":3602,"mtime":1615589686081,"results":"38","hashOfConfig":"30"},{"size":2413,"mtime":1615540124302,"results":"39","hashOfConfig":"30"},{"size":1503,"mtime":1615539995862,"results":"40","hashOfConfig":"30"},{"size":450,"mtime":1615540201747,"results":"41","hashOfConfig":"30"},{"size":2373,"mtime":1615589831321,"results":"42","hashOfConfig":"30"},{"size":1849,"mtime":1615540175721,"results":"43","hashOfConfig":"30"},{"size":236,"mtime":1614757885033,"results":"44","hashOfConfig":"30"},{"size":439,"mtime":1615434694820,"results":"45","hashOfConfig":"30"},{"size":842,"mtime":1615526080248,"results":"46","hashOfConfig":"30"},{"size":432,"mtime":1615435416713,"results":"47","hashOfConfig":"30"},{"size":1327,"mtime":1615525493437,"results":"48","hashOfConfig":"30"},{"size":3923,"mtime":1615535607740,"results":"49","hashOfConfig":"30"},{"size":1030,"mtime":1615540084967,"results":"50","hashOfConfig":"30"},{"size":2130,"mtime":1615589620618,"results":"51","hashOfConfig":"30"},{"size":423,"mtime":1615441205702,"results":"52","hashOfConfig":"30"},{"size":920,"mtime":1615441366791,"results":"53","hashOfConfig":"30"},{"size":792,"mtime":1615442580348,"results":"54","hashOfConfig":"30"},{"size":5117,"mtime":1615539276711,"results":"55","hashOfConfig":"30"},{"size":719,"mtime":1615535542384,"results":"56","hashOfConfig":"30"},{"size":243,"mtime":1615530127584,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"1xvjlim",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"60"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"60"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"60"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"D:\\agile-board\\src\\index.js",[],["118","119"],"D:\\agile-board\\src\\reportWebVitals.js",[],"D:\\agile-board\\src\\App.js",["120"],"D:\\agile-board\\src\\components\\labelform.js",[],"D:\\agile-board\\src\\reducers\\rootReducer.js",[],"D:\\agile-board\\src\\actions\\actions.js",[],"D:\\agile-board\\src\\reducers\\selectedlabel.reducer.js",[],"D:\\agile-board\\src\\components\\taskviewloader.js",["121"],"D:\\agile-board\\src\\components\\LabelForm.js",[],"D:\\agile-board\\src\\components\\task-lane\\LaneList.js",["122","123","124"],"import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { DragDropContext } from 'react-beautiful-dnd';\r\nimport { deleteTask } from '../../actions/actions'\r\n\r\n//importing components\r\nimport Lane from './Lane'\r\n\r\nconst LaneList = () => {\r\n\r\n    const Lanes = useSelector(state => state.Lanes);\r\n    const filteredLanes = useSelector(state => state.FilteredLanes);\r\n\r\n    const Dispatch = useDispatch();\r\n\r\n    const handleDragEnd = (result) => {\r\n        const lanesourceid = parseInt(result.source.droppableId);\r\n        const lanedestionationid = parseInt(result.destination.droppableId);\r\n        const lanedestinationindex = parseInt(result.destination.index);\r\n        const lanesourceindex = parseInt(result.source.index);\r\n        const taskid = parseFloat(result.draggableId);\r\n\r\n\r\n        if (lanesourceid !== lanedestionationid) {\r\n            console.log('different lane')\r\n            // var newArray = (Lane.slice(0, lanedestinationindex), taskid, Lane.slice(lanedestinationindex + 1, Lane.length)\r\n        } else {\r\n            if (lanedestinationindex > lanesourceindex) {\r\n                console.log('moved down from ' + lanesourceindex + ' to ' + lanedestinationindex);\r\n            } else if (lanedestinationindex < lanesourceindex) {\r\n                console.log('moved up from ' + lanesourceindex + ' to ' + lanedestinationindex);\r\n            }\r\n        }\r\n    }\r\n\r\n    const DeleteTask = (id) => {\r\n        Dispatch(deleteTask(id));\r\n    }\r\n\r\n    // const CreateLane = (e) => {\r\n    //     setLanes([...lanes, {\r\n    //         id: Math.random() * 1000,\r\n    //         lanename: 'Demo Lane'\r\n    //     }\r\n    //     ]);\r\n    //     console.log(lanes);\r\n    // }  \r\n\r\n    return (\r\n        <>\r\n            <DragDropContext onDragEnd={handleDragEnd}>\r\n                {\r\n                    filteredLanes.map(lane => (\r\n                        <Lane\r\n                            key={lane.id}\r\n                            lane={lane} />\r\n                    ))\r\n                }\r\n            </DragDropContext>\r\n\r\n            {/* <div className=\"addlanecontainer\">\r\n                <h6 className=\"lane-title\"></h6>\r\n                <div className=\"addlane\">\r\n                    <i onClick={CreateLane} className=\"fas fa-plus-circle addlane-icon\"></i>\r\n                </div>\r\n            </div> */}\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LaneList;","D:\\agile-board\\src\\components\\task-lane\\Lane.js",[],"D:\\agile-board\\src\\components\\task-lane\\TaskList.js",[],"D:\\agile-board\\src\\components\\task-lane\\Task.js",[],"D:\\agile-board\\src\\components\\task-lane\\LaneTitle.js",[],"D:\\agile-board\\src\\reducers\\Search.reducer.js",[],"D:\\agile-board\\src\\components\\task-form\\NameInput.js",[],"D:\\agile-board\\src\\components\\task-form\\TaskTypeInput.js",[],"D:\\agile-board\\src\\components\\task-form\\DescriptionInput.js",[],"D:\\agile-board\\src\\components\\task-form\\LaneInput.js",["125"],"import React, { useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Dropdown } from 'react-bootstrap';\r\n\r\nconst LaneInput = ({ entity, laneId, setLaneId, entityType }) => {\r\n    const lanes = useSelector(state => state.Lanes);\r\n    const [laneName, setLaneName] = useState();\r\n\r\n    useEffect(() => {\r\n        if (laneId) {\r\n            setLaneName(lanes.find(lane => lane.id === parseInt(laneId)).lanename);\r\n        }\r\n    }, [laneId])\r\n\r\n    return (\r\n        <>\r\n            {\r\n                laneId\r\n                    ?\r\n                    <Dropdown eventKey={laneId} onSelect={e => setLaneId(e)}>\r\n                        < Dropdown.Toggle eventKey={laneId} variant=\"success\" id=\"dropdown-basic\" >\r\n                            {laneName}\r\n                        </Dropdown.Toggle >\r\n                        <Dropdown.Menu>\r\n                            {\r\n                                lanes.map(lane => (\r\n                                    <Dropdown.Item eventKey={lane.id} >{lane.lanename}</Dropdown.Item>\r\n                                ))\r\n                            }\r\n                        </Dropdown.Menu>\r\n                    </Dropdown >\r\n                    :\r\n                    <span></span>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LaneInput;","D:\\agile-board\\src\\components\\task-form\\TaskForm.js",["126","127"],"import React, { useState, useEffect } from 'react';\r\nimport { Modal, Form, Container, Row, Col } from 'react-bootstrap';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addTask, updateTask } from '../../actions/actions';\r\nimport NameInput from './NameInput';\r\nimport TaskTypeInput from './TaskTypeInput';\r\nimport DescriptionInput from './DescriptionInput';\r\nimport LaneInput from './LaneInput';\r\nimport DueDateInput from './DueDateInput';\r\nimport PriorityInput from './PriorityInput';\r\n\r\nconst TaskForm = ({ closeForm, entity, entityType }) => {\r\n\r\n    const [taskname, setTaskName] = useState('');\r\n    const [duedate, setDuedate] = useState('');\r\n    const [priority, setPriority] = useState('High');\r\n    const [description, setDescription] = useState('');\r\n    const [labelId, setLabelId] = useState();\r\n    const [laneId, setLaneId] = useState();\r\n\r\n    const Dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (entityType === \"task\") {\r\n            setTaskName(entity.taskname);\r\n            setDuedate(entity.duedate);\r\n            setPriority(entity.priority);\r\n            setDescription(entity.description);\r\n            setLabelId(entity.labelid);\r\n            setLaneId(entity.laneid);\r\n        } else if (entityType === \"lane\") {\r\n            setLaneId(entity.id);\r\n        }\r\n    }, [])\r\n\r\n    const CreateTask = (e) => {\r\n        e.preventDefault();\r\n        Dispatch(addTask(newtask()));\r\n        closeForm();\r\n    }\r\n\r\n    const UpdateTask1 = (e) => {\r\n        e.preventDefault();\r\n        Dispatch(updateTask(updatedtask()));\r\n        closeForm();\r\n    }\r\n\r\n\r\n    function newtask() {\r\n        return {\r\n            'id': Math.random() * 1000,\r\n            'taskname': taskname,\r\n            'description': description,\r\n            'duedate': duedate,\r\n            'priority': priority,\r\n            'labelid': labelId,\r\n            'laneid': laneId\r\n        }\r\n    }\r\n\r\n    function updatedtask() {\r\n        return {\r\n            'id': entity.id,\r\n            'taskname': taskname,\r\n            'description': description,\r\n            'duedate': duedate,\r\n            'priority': priority,\r\n            'labelid': labelId,\r\n            'laneid': laneId\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title as=\"h6\" id=\"contained-modal-title-vcenter\">\r\n                    New Task\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form>\r\n                    <Container>\r\n                        <Row>\r\n                            <Col md=\"8\">\r\n                                <TaskTypeInput labelId={labelId} setLabelId={setLabelId} />\r\n                                <NameInput taskname={taskname} setTaskName={setTaskName} />\r\n                                <DescriptionInput description={description} setDescription={setDescription} />\r\n                            </Col>\r\n                            <Col md=\"4\">\r\n                                <DueDateInput duedate={duedate} setDuedate={setDuedate} />\r\n                                <PriorityInput priority={priority} setPriority={setPriority} />\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </Form>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                {\r\n                    entityType === \"task\"\r\n                        ?\r\n                        <button className=\"main-btn yellow\" onClick={(e) => UpdateTask1(e)} type=\"submit\">Update Task</button>\r\n                        :\r\n                        <button className=\"main-btn yellow\" onClick={(e) => CreateTask(e)} type=\"submit\">Create Task</button>\r\n                }\r\n                <button className=\"main-btn grey\" variant=\"secondary\" onClick={closeForm}>Cancel</button>\r\n            </Modal.Footer>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default TaskForm;","D:\\agile-board\\src\\components\\header\\Header.js",[],"D:\\agile-board\\src\\components\\header\\LabelDropdown.js",[],"D:\\agile-board\\src\\components\\task-form\\DueDateInput.js",[],"D:\\agile-board\\src\\components\\task-form\\PriorityInput.js",[],"D:\\agile-board\\src\\reducers\\LabelReducer.js",[],"D:\\agile-board\\src\\reducers\\LanesReducer.js",[],"D:\\agile-board\\src\\components\\ModalLoader.js",[],"D:\\agile-board\\src\\reducers\\FilteredLanesReducer.js",[],{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","severity":1,"message":"133","line":6,"column":8,"nodeType":"134","messageId":"135","endLine":6,"endColumn":17},{"ruleId":"136","severity":1,"message":"137","line":31,"column":8,"nodeType":"138","endLine":31,"endColumn":46,"suggestions":"139"},{"ruleId":"132","severity":1,"message":"140","line":11,"column":11,"nodeType":"134","messageId":"135","endLine":11,"endColumn":16},{"ruleId":"132","severity":1,"message":"141","line":21,"column":15,"nodeType":"134","messageId":"135","endLine":21,"endColumn":21},{"ruleId":"132","severity":1,"message":"142","line":36,"column":11,"nodeType":"134","messageId":"135","endLine":36,"endColumn":21},{"ruleId":"136","severity":1,"message":"143","line":13,"column":8,"nodeType":"138","endLine":13,"endColumn":16,"suggestions":"144"},{"ruleId":"132","severity":1,"message":"145","line":8,"column":8,"nodeType":"134","messageId":"135","endLine":8,"endColumn":17},{"ruleId":"136","severity":1,"message":"146","line":34,"column":8,"nodeType":"138","endLine":34,"endColumn":10,"suggestions":"147"},"no-native-reassign",["148"],"no-negated-in-lhs",["149"],"no-unused-vars","'LabelForm' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'filterHandler'. Either include it or remove the dependency array.","ArrayExpression",["150"],"'Lanes' is assigned a value but never used.","'taskid' is assigned a value but never used.","'DeleteTask' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'lanes'. Either include it or remove the dependency array.",["151"],"'LaneInput' is defined but never used.","React Hook useEffect has missing dependencies: 'entity.description', 'entity.duedate', 'entity.id', 'entity.labelid', 'entity.laneid', 'entity.priority', 'entity.taskname', and 'entityType'. Either include them or remove the dependency array. If 'setTaskName' needs the current value of 'entity.taskname', you can also switch to useReducer instead of useState and read 'entity.taskname' in the reducer.",["152"],"no-global-assign","no-unsafe-negation",{"desc":"153","fix":"154"},{"desc":"155","fix":"156"},{"desc":"157","fix":"158"},"Update the dependencies array to be: [selectedLabel, lanes, searchKeywords, filterHandler]",{"range":"159","text":"160"},"Update the dependencies array to be: [laneId, lanes]",{"range":"161","text":"162"},"Update the dependencies array to be: [entity.description, entity.duedate, entity.id, entity.labelid, entity.laneid, entity.priority, entity.taskname, entityType]",{"range":"163","text":"164"},[1122,1160],"[selectedLabel, lanes, searchKeywords, filterHandler]",[466,474],"[laneId, lanes]",[1315,1317],"[entity.description, entity.duedate, entity.id, entity.labelid, entity.laneid, entity.priority, entity.taskname, entityType]"]